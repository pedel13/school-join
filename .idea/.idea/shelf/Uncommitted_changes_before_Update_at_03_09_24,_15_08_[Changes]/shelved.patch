Index: js/renderTaskOverlay.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function renderTaskOverlay() {\n\n}\n\nfunction openTaskOverlay(taskId = \"\") {\n    takeElementFromTask(taskId);\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    let task = tasks[taskId];\n    localStorage.activeTask = JSON.stringify(task);\n    if (task.subtasks == 'no') {\n        document.getElementById('taskOverlayCheckbox').innerHTML = 'no subtask'\n    }\n    else {\n        subtaskLoop(taskId);\n    }\n    document.getElementById('taskOverlay').classList.remove('d-none');\n}\n\nfunction closeTaskOverlay() {\n    document.getElementById('taskOverlay').classList.add('d-none');\n    location.reload();\n}\n\nfunction takeElementFromTask(taskid) {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    let contacts = JSON.parse(localStorage.getItem(\"usableContacts\"));\n    let element = tasks[taskid];\n    let categoryText = categoryFinder(element);\n    renderTaskCardBig(element, categoryText, taskid);\n    for (let contact in element.selectContacts) {\n        let activeContactId = element.selectContacts[contact];\n        let activeContact = contacts[activeContactId];\n        renderContactNameInOverlai(activeContact, activeContactId)\n    }\n}\n\nfunction subtaskLoop(taskId) {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    let element = tasks[taskId];\n    let subtasks = element.subtasks;\n    let subtaskCheckbox = element.subtask;\n    let i = 0;\n    subtasks.forEach(subtask => {\n        if (subtaskCheckbox[i] == 'false') {\n            renderSubTasks(subtask, taskId, i, '');\n        } else {\n            renderSubTasks(subtask, taskId, i, 'checked');\n        }\n        i++;\n    });\n}\n\nasync function changeSubtaskProvement(i, taskId = '') {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    let element = tasks[taskId];\n    let subtaskCheckbox = element.subtask;\n    if (subtaskCheckbox[i] == 'false') {\n        subtaskCheckbox[i] = 'true';\n        await updateSubtaskProvement(subtaskCheckbox, `${taskId}/subtask`);\n    } else {\n        subtaskCheckbox[i] = 'false';\n        await updateSubtaskProvement(subtaskCheckbox, `${taskId}/subtask`);\n    }\n}\n\nasync function updateSubtaskProvement(data = {}, path = '') {\n    try {\n        let response = await fetch(baseUrl + \"/board/tasks/\" + path + \".json\", {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    } catch (error) {\n        console.error(\"Error PUT data in database:\", error);\n    }\n}\n\nasync function taskEdit(taskId) {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    let task = tasks[taskId];\n    renderTaskEditor(taskId, task);\n    prioButtonSelect(task.priority);\n    await loadUsableContacts();\n    selectContacts = [];\n    for (let contact in task.selectContacts) {\n        let activeContactId = task.selectContacts[contact];\n        console.log(\"contact  :   \" , contact);\n        console.log(\"activContactId:   \" , activeContactId);\n        selectContact(activeContactId);\n        let checkboxId = `input${activeContactId}`;\n        let checkbox = document.getElementById(checkboxId);\n        console.log(checkbox)\n        if (checkbox) {\n            checkbox.checked = true;\n            console.log(true);\n        } else {\n            console.warn(`Checkbox mit ID input${activeContactId} nicht gefunden`);\n        }\n    }\n    renderAllCreateSubtasks(taskId);\n}\n\nfunction renderContactNameInOverlaiEdit(activeContact, contactId) {\n    document.getElementById(\"selectedContactsInOferlai\").innerHTML += `\n    <li class=\"d-flex align-items-center\">\n    <p class=\"rounded-100 fc-white board-user-icon d-flex align-items-center justify-content-center m-8 ${activeContact.contactColor}\" id=\"${contactId}\">\n    ${activeContact.nameCharts[0]}${activeContact.nameCharts[1]}</p>\n    </li>\n    `\n}\n\n\nfunction renderContactNameInOverlai(activeContact, contactId) {\n    document.getElementById(\"selectedContactsInOferlai\").innerHTML += `\n    <li class=\"d-flex align-items-center\">\n    <p class=\"rounded-100 fc-white board-user-icon d-flex align-items-center justify-content-center m-8 ${activeContact.contactColor}\" id=\"${contactId}\">\n    ${activeContact.nameCharts[0]}${activeContact.nameCharts[1]}</p>\n    <p>${activeContact.name}</p>\n    </li>\n    `\n}\n\n\nfunction renderSubTasks(subtask, taskId, i, checkBox = '') {\n    document.getElementById('taskOverlayCheckbox').innerHTML += `\n    <div class=\"checkBox\">\n    <input type=\"checkbox\" id=\"ceckBox_${i}\" onclick=\"changeSubtaskProvement(${i}, '${taskId}')\" ${checkBox}>\n    <span>${subtask}</span>\n</div>`\n}\n\nfunction renderTaskCardBig(element, categoryText, taskId) {\n    document.getElementById('taskOverlay').innerHTML =\n        `<div id=\"taskOverlayWrapper\" class=\"taskOverlayWrapper slide-right\">\n    <div id=\"taskOverlayType\" class=\"taskOverlayType\">\n    <div id=\"issueType\" class=\"issueType ${element.categorySelect}\">\n    ${categoryText}\n    </div>\n    <img src=\"./img/icons/cancel-logo.png\"  onclick=\"closeTaskOverlay()\">\n    </div>\n    \n    <div class=\"scrollbarTaskOverlayWrapper scrollbox\">\n    <div  class=\"taskOverlayTitle\">\n        ${element.title}\n    </div>\n\n    <div id=\"taskOverlayFacts\" class=\"taskOverlayFacts\">\n        <p>${element.description}</p>\n        <p>Due Date: ${element.datePicker}</p>\n        <p>Priority: ${element.priority}</p>\n    </div>\n\n    <div id=\"taskOverlayAssignee\" class=\"taskOverlayAssignee\">\n        Assigned to:\n        <ul id=\"selectedContactsInOferlai\">\n        </ul>\n    </div>\n\n    <div id=\"taskOverlayCheckbox\" class=\"taskOverlayCheckbox\">\n        <p>Subtasks:</p>\n    </div>\n    </div>\n    <div id=\"taskOverlayBottomEdit\" class=\"taskOverlayBottomEdit\">\n        <button class=\"unstyled-button editBar\" type=\"button\" onclick=\"deleteTask(event, '${taskId}')\">\n            <img src=\"./img/icons/delete_icon.png\">\n            <p>Delete</p>\n        </button>\n\n        <button class=\"unstyled-button editBar\" type=\"button\" onclick=\"taskEdit('${taskId}')\">\n            <img src=\"./img/icons/edit_icon.png\">\n            <p>Edit</p>\n        </button>\n    </div>\n</div>`\n}\n\nfunction renderTaskEditor(taskId, task) {\n    document.getElementById('taskOverlay').innerHTML = /*html*/ `\n        <div  class=\"taskOverlayWrapper slide-right\">\n        <div  class=\"taskOverlayTypeEdite d-flex\">\n            <img src=\"./img/icons/cancel-logo.png\"  onclick=\"closeTaskOverlay()\">\n        </div>\n            <form class=\"main\" onsubmit=\"changeTask(event,'${taskId}')\">\n                <div class=\"addTaskWrapper scrollbarTaskOverlayWrapper scrollbox\">\n                    <div>\n                        <div>\n                            <p class=\"fSize-20  editTaskWrapper\">Title<span class=\"redStar\">*</span></p>\n                            <input type=\"text\" id=\"title\" value=\"${task.title}\" required/>\n                        </div>\n\n                        <div>&nbsp;</div>\n\n                        <div>\n                            <p class=\"fSize-20  editTaskWrapper\">Description</p>\n                            <textarea rows=\"5\" id=\"description\" >${task.description}</textarea>\n                        </div>\n\n                        \n                        <div>&nbsp;</div>\n                        \n                        <div>\n                        <p class=\"fSize-20  editTaskWrapper\">Due Date<span class=\"redStar\">*</span></p>\n                        <input type=\"date\" id=\"datePicker\" value=\"${task.datePicker}\" required>\n                        </div>\n                        \n                        <div>&nbsp;</div>\n                        \n                        <div>\n                            <p class=\"fSize-20  editTaskWrapper\">Prio</p>\n                            <div id=\"priority\" class=\"priority d-flex\">\n                                <button id=\"urgentButton\" type=\"button\" onclick=\"prioButtonSelect('urgent')\" class=\"priorityButton d-flex align-items-center justify-content-evenly\">\n                                Urgent\n                                <div id=\"addTaskPrioUrgent\" class=\"priorityImg addTaskPrioUrgent\"></div>\n                                    </button>\n                                    <button id=\"mediumButton\" type=\"button\" onclick=\"prioButtonSelect('medium')\" class=\"priorityButton d-flex align-items-center justify-content-evenly\">\n                                        Medium\n                                        <div id=\"addTaskPrioMedium\" class=\"priorityImg addTaskPrioMedium\"></div>\n                                    </button>\n                                    <button id=\"lowButton\" type=\"button\" onclick=\"prioButtonSelect('low')\" class=\"priorityButton d-flex align-items-center justify-content-evenly\">\n                                        Low\n                                        <div id=\"addTaskPrioLow\" class=\"priorityImg addTaskPrioLow\"></div>\n                                    </button>\n                            </div>\n                        </div>\n\n                        <div>&nbsp;</div>\n\n\n\n                        <div class=\"gap-8\">\n                            <p class=\"fSize-16 mb-8\">Assigned to</p>\n                            <div>\n                                <div class=\"selectBox\" onclick=\"showCheckboxes()\">\n                                    <select id=\"selectInputAssignee\">\n                                        <option value=\"\" disabled selected>Select contacts to assign</option>\n                                    </select>\n                                    <div class=\"overSelect\"></div>\n                                </div>\n                                <div id=\"checkboxes\" class=\"\">\n                                    <div class=\"d-flex flex-column w-100\" id=\"selectContacts\">\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"d-flex justify-content-between mt-8\">\n                                <div class=\"fc-white d-flex gap-10\" id=\"selectedContact\">\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div>&nbsp;</div>\n                        \n                        <div>\n                            <p class=\"fSize-20  editTaskWrapper\">Subtasks</p>\n                            <div class=\"addTaskEnterSubtask d-flex align-items-center justify-content-between\">\n                                <input type=\"text\" id=\"subtasks\" placeholder=\"Enter Subtasks\"/>\n                                <button class=\"d-flex\" id=\"addTaskAddSubtaskButton\" type=\"button\" onclick=\"addSubtaskAddArray()\">\n                                <div class=\"addTaskAdd\"></div>\n                                </button>\n                            </div>\n                            <ul id=\"subtaskStorage\"></ul>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"editTaskBottom d-flex\">\n                    <div>\n                        <button class=\"editTaskEditBottom d-flex align-items-center justify-content-center\">OK <img src=\"./img/icons/check-icon.png\"  class=\"createTaskButtonImg\"></button>\n                    </div>\n                </div>\n            </form>\n\n            </div>\n        </div>\n    `;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/renderTaskOverlay.js b/js/renderTaskOverlay.js
--- a/js/renderTaskOverlay.js	(revision 5d1dcb6ed7364ed0cd2a96fb684fa06fdde4aa90)
+++ b/js/renderTaskOverlay.js	(date 1725368844580)
@@ -86,15 +86,11 @@
     selectContacts = [];
     for (let contact in task.selectContacts) {
         let activeContactId = task.selectContacts[contact];
-        console.log("contact  :   " , contact);
-        console.log("activContactId:   " , activeContactId);
         selectContact(activeContactId);
         let checkboxId = `input${activeContactId}`;
         let checkbox = document.getElementById(checkboxId);
-        console.log(checkbox)
         if (checkbox) {
             checkbox.checked = true;
-            console.log(true);
         } else {
             console.warn(`Checkbox mit ID input${activeContactId} nicht gefunden`);
         }
Index: js/contact.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Local variables */\nlet localContactArray;\n\n/**\n * Creates new Contact-Data and saves them to the Database\n * @function addContact\n */\nasync function addContact() {\n    let contactName = document.getElementById('newContactName').value;\n    let contactMail = document.getElementById('newContactMail').value;\n    let contactPhone = document.getElementById('newContactPhone').value;\n    let nameCharts = [];\n    nameCharts = splitName(contactName);\n    let contactColor = setColor();\n    await setContactToFirebase(contactName, contactMail, contactPhone, nameCharts, contactColor);\n    clearNewContactForm();\n    closeContactOverlay();\n    window.location.reload();\n}\n\nfunction setColor() {\n    let randomNumber = Math.floor(Math.random() * 7);\n    let color = '';\n    switch (randomNumber) {\n        case 0:\n            color = \"bg-orange\";\n            break;\n        case 1:\n            color = \"bg-purple\";\n            break;\n        case 2:\n            color = \"bg-blue\";\n            break;\n        case 3:\n            color = \"bg-pink\";\n            break;\n        case 4:\n            color = \"bg-yellow\";\n            break;\n        case 5:\n            color = \"bg-green\";\n            break;\n        case 6:\n            color = \"bg-dark-blue\";\n            break;\n        case 7:\n            color = \"bg-red\";\n            break;\n        default:\n            break;\n    }\n    return color;\n}\n\nfunction splitName(data) {\n    var cdata = data.split(\" \");\n    let firstName = cdata[0];\n    let secentName = cdata[1];\n    let nameCharts = [];\n    let firstChart = firstName.charAt(0);\n    let firstChartUpperCase = firstChart.toUpperCase();\n    let secentChart = secentName.charAt(0);\n    let secentChartUpperCase = secentChart.toUpperCase();\n    nameCharts.push(firstChartUpperCase);\n    nameCharts.push(secentChartUpperCase);\n    return nameCharts;\n}\n\nasync function postContactData(path = \"\", data) {\n    try {\n        let response = await fetch(BASE_URL + path + \".json\", {\n            method: \"POST\",\n            header: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(data)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error(\"Error setting data in database:\", error);\n    }\n}\n\nasync function setContactToFirebase(name, email, phone, nameCharts, contactColor) {\n    let contactData = {\n        \"name\": name,\n        \"email\": email,\n        \"phone\": phone,\n        \"nameCharts\": nameCharts,\n        \"contactColor\": contactColor,\n    };\n    await postContactData('contacts', contactData);\n}\n\nasync function fetchContacts() {\n    await loadContacts();\n\n    for (let contactID in localContactArray) {\n        let element = localContactArray[contactID];\n        let name = element.name;\n        let mail = element.email;\n        let nameCharts = element.nameCharts;\n        let color = element.contactColor\n        renderContacts(contactID, name, mail, nameCharts, color);\n    }\n\n}\n\nasync function loadContacts(path = \"/contacts\") {\n    let response = await fetch(BASE_URL + path + \".json\");\n    localContactArray = await response.json();\n}\n\n/**\n * Rendering the contact data into the HTML\n */\nasync function renderContacts(contactID, name, mail, nameCharts, color) {\n    document.getElementById('contactList').innerHTML += /*html*/ `\n        <div id=\"contactDetailWrapper_${contactID}\" class=\"contactDetailWrapper\">\n            <ul class=\"namesList\" id=\"contactUlActive_${contactID}\" onclick=\"activeContact('${contactID}'); renderClickedContact('${contactID}')\">\n                <li id=\"contactItem_${contactID}\" class=\"contactItem\">\n                    <div class=\"innerContactDetailWrapper\">\n                        <div id=\"userProfile\">\n                        <div class=\"fc-white d-flex\">\n                    <p class=\"rounded-100 board-user-icon d-flex align-items-center justify-content-center ${color} -m-8\">${nameCharts[0]}${nameCharts[1]}</p>\n                    </div>\n                        </div>\n                        <div class=\"contact\">\n                            ${name}\n                            <br>\n                            <a href=\"mailto:${mail}\" target=\"_blank\" class=\"emailLink\">\n                                ${mail}\n                            </a>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    `;\n}\n\nfunction renderClickedContact(contactID) {\n    let name = localContactArray[contactID]['name'];\n    let email = localContactArray[contactID]['email'];\n    let phone = localContactArray[contactID]['phone'];\n    let color = localContactArray[contactID]['contactColor'];\n    let nameCharts = localContactArray[contactID]['nameCharts'];\n    document.getElementById('renderedContactDetails').innerHTML = \"\";\n    document.getElementById(`renderedContactDetails`).classList.remove('d-none');\n    document.getElementById('renderedContactDetails').innerHTML += /*html*/ ` \n        <div id=\"contactSummary\">\n            <div id=\"contactTitle\">\n                <div id=\"contactAvatar\">\n                    <div class=\"credentialsCircle ${color}\" id=\"credentialsCircle\">\n                        ${nameCharts[0]}${nameCharts[1]}\n                    </div>\n                </div>\n                \n                <div id=\"editName\">\n                    <div class=\"currentName\">\n                        ${name}\n                    </div>\n                    <div id=\"editButtons\" onclick=\"editContact()\">\n                        <div id=\"editCurrentContact\">\n                            <img src=\"./img/icons/edit_icon.svg\" alt=\"edit\">\n                            Edit\n                        </div>\n                        \n                        <div id=\"deleteCurrentContact\" onclick=\"deleteContact('${contactID}')\">\n                            <img src=\"./img/icons/delete_icon.svg\" alt=\"delete\">\n                            Delete\n                        </div>\n                    </div>\n                </div>                \n            </div>\n        </div>\n        \n        <div id=\"contactDetails\">\n            <p>Contact Information</p>\n            <div id=\"contactDetailMail\">\n                <b>Email:</b>\n                <br>\n                <br>\n                <a href=\"mailto:${email}\" class=\"mailLink\">${email}</a>\n            </div>\n            <div id=\"contactDetailPhone\">\n                <b>Phone:</b>\n                <br>\n                <br>\n                <a href=\"tel:${phone}\" class=\"phoneLink\">${phone}</a>\n            </div>\n        </div>\n    `;\n}\n\nfunction openAddContactOverlay() {\n    document.getElementById('contactOverlay').classList.remove('d-none');\n}\n\nfunction closeContactOverlay() {\n    document.getElementById('contactOverlay').classList.add('d-none');\n}\n\nfunction activeContact() {\n    const navLinkEls = document.querySelectorAll('.contactDetailWrapper');\n\n    navLinkEls.forEach(navLinkEl => {\n        navLinkEl.addEventListener('click', () => {\n            document.querySelector('.activeContact')?.classList.remove('activeContact');\n            navLinkEl.classList.add('activeContact');\n        })\n    });\n}\n\nfunction clearNewContactForm() {\n    document.getElementById('newContactName').value = '';\n    document.getElementById('newContactMail').value = '';\n    document.getElementById('newContactPhone').value = '';\n}\n\nfunction editContact() {\n\n}\n\nasync function deleteContact(contactToDelete) {\n    try {\n        let response = await fetch(BASE_URL + \"/contacts/\" + contactToDelete + \".json\", {\n            method: 'DELETE',\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n    }\n    catch (error) {\n        console.error(\"Error delete data in database:\", error);\n    }\n    window.location.reload();\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/contact.js b/js/contact.js
--- a/js/contact.js	(revision 5d1dcb6ed7364ed0cd2a96fb684fa06fdde4aa90)
+++ b/js/contact.js	(date 1725368844577)
@@ -169,7 +169,7 @@
                             Edit
                         </div>
                         
-                        <div id="deleteCurrentContact" onclick="deleteContact('${contactID}')">
+                        <div id="deleteCurrentContact" onclick="deletecontactInTasks(event,'${contactID}')">
                             <img src="./img/icons/delete_icon.svg" alt="delete">
                             Delete
                         </div>
@@ -225,9 +225,11 @@
 
 }
 
-async function deleteContact(contactToDelete) {
+async function deleteContact(path="", contactToDelete) {
+    path = path+contactToDelete+`.json`;
+    console.log(path);
     try {
-        let response = await fetch(BASE_URL + "/contacts/" + contactToDelete + ".json", {
+        let response = await fetch(BASE_URL + path, {
             method: 'DELETE',
         });
         if (!response.ok) {
@@ -237,5 +239,36 @@
     catch (error) {
         console.error("Error delete data in database:", error);
     }
-    window.location.reload();
+}
+
+async function deletecontactInTasks(event,contactToDelete="") {
+    event.preventDefault(event);
+    let tasks = await loadTasks("/board/tasks");
+    let contactprof;
+    let activeContactPosition;
+    for (let taskId in tasks) {
+        let element = tasks[taskId];
+        let contactsInTask = element.selectContacts;
+        contactprof=false;
+        if (typeof(contactsInTask) != "undefined") {
+            for (let contact in contactsInTask) {
+                console.log("contactToDelete:   "+ contactToDelete);
+                console.log("contact:    " + contactsInTask[contact]);
+                if (contactsInTask[contact] == contactToDelete){
+                    console.log("test in if");
+                    activeContactPosition = contact;
+                    contactprof=true;
+                }
+            }
+        }else{
+            console.log("keine Contacts");
+        }
+
+        if (contactprof === true) {
+            contactsInTask.splice(activeContactPosition, 1);
+             await updateTask(`/board/tasks/${taskId}/selectContacts`,contactsInTask)
+        }
+    }
+    await deleteContact('/contacts/', contactToDelete);
+    location.reload();
 }
\ No newline at end of file
Index: js/board.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>let cardDraggedId;\nlet countOnToDo = 0;\nlet countOnInProgress = 0;\nlet countOnAwaitFeedback = 0;\nlet countOnDone = 0;\nlet subtaskCount = 0;\nlet subtaskCountInProzent = 0;\nlet subtaskCountProvement = 0;\n\nfunction allowDrop(ev) {\n    ev.preventDefault();\n}\n\nfunction drag(id) {\n    cardDraggedId = id;\n}\n\nasync function drop(dropPosition) {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    let dropCard = tasks[cardDraggedId];\n    reduceDroppedElement(dropCard[\"position\"]);\n    dropCard[\"position\"] = dropPosition;\n    localStorage.activeTask = JSON.stringify(dropCard);\n    localStorage.setItem(\"taskId\", `${cardDraggedId}`);\n    await updateTask();\n    countOnToDo = 0;\n    countOnInProgress = 0;\n    countOnAwaitFeedback = 0;\n    countOnDone = 0;\n    renderAllTasks();\n}\n\nasync function updateTask() {\n    let task = localStorage.getItem(\"activeTask\");\n    let taskId = localStorage.getItem(\"taskId\");\n    try {\n        let response = await fetch(baseUrl + \"/board/tasks/\" + taskId + \".json\", {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: task\n        }); \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n    }  catch (error) {\n        console.error(\"Error PUT data in database:\", error);\n    }\n}\n\n\nasync function changeTask(event,taskId='') {\n    event.preventDefault(event);\n    let task = JSON.parse(localStorage.getItem(\"activeTask\"));\n    task[\"title\"] = document.getElementById('title').value;\n    task[\"description\"] = document.getElementById('description').value;\n    task[\"selectContacts\"] = selectContacts;\n    task[\"datePicker\"] = document.getElementById('datePicker').value;\n    task[\"priority\"] = prio;\n    if (subtasklist[0] !== 'no') {\n        task[\"subtasks\"] = subtasklist;\n        task[\"subtask\"] = subtaskProofment;\n    }\n    localStorage.activeTask = JSON.stringify(task);\n    localStorage.setItem(\"taskId\", `${taskId}`);\n    await updateTask();\n    closeTaskOverlay();\n}\n\n\nfunction removeDraggedCard() {\n    const element = document.getElementById(cardDraggedId);\n    element.remove();\n}\n\nfunction reduceDroppedElement(elementPosition) {\n    switch (elementPosition) {\n        case \"board-task-on-to-do\":\n            countOnToDo--;\n            break;\n\n        case \"board-task-on-in-progress\":\n            countOnInProgress--;\n            break;\n\n        case \"board-task-on-await-feedback\":\n            countOnAwaitFeedback--;\n            break;\n\n        case \"board-task-on-done\":\n            countOnDone--;\n            break;\n    }\n\n}\n\nfunction findeTask(value) {\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    let contacts = JSON.parse(localStorage.getItem(\"usableContacts\"));\n    let filter = value.toUpperCase();\n    cleanTaskboard();\n    for (let taskId in tasks) {\n        let element = tasks[taskId];\n        let titleTest = element.title;\n        let descriptionTest = element.description;\n            if (titleTest.toUpperCase().indexOf(filter) > -1) {\n                renderFindeTask(element, taskId, contacts);\n                } else {\n                    if (descriptionTest.toUpperCase().indexOf(filter) > -1) {\n                        renderFindeTask(element, taskId, contacts);\n                }\n            }\n        }\n            noTasksInProgress();\n}\n\nfunction renderFindeTask(element, taskId, contacts) {\n    let subtask = subtaskExist(element);\n    let categoryText = categoryFinder(element);\n    countForNoTask(element.position);\n    renderTask(element, taskId, subtask, categoryText);\n    for (let contact in element.selectContacts) {\n        let activeContactId = element.selectContacts[contact];\n        let activeContact = contacts[activeContactId];\n        renderAktiveContakts(activeContact, activeContactId, taskId);\n        }\n        subtaskCount = 0;\n    \n}\n\nfunction noTasksInProgress() {\n    if (countOnToDo != 0) {\n        addNoTaskInProgress(\"no-tasks-to-do\");\n    }\n\n    else {\n        removeNoTaskInProgress(\"no-tasks-to-do\");\n    }\n\n    if (countOnInProgress != 0) {\n        addNoTaskInProgress(\"no-tasks-in-progress\");\n    }\n    else {\n        removeNoTaskInProgress(\"no-tasks-in-progress\");\n    }\n\n    if (countOnAwaitFeedback != 0) {\n        addNoTaskInProgress(\"no-tasks-await-feedback\");\n    }\n    else {\n        removeNoTaskInProgress(\"no-tasks-await-feedback\");\n    }\n\n    if (countOnDone != 0) {\n        addNoTaskInProgress(\"no-tasks-Done\");\n    }\n    else {\n        removeNoTaskInProgress(\"no-tasks-Done\");\n    }\n}\n\nfunction addNoTaskInProgress(taskInProgress = \"\") {\n    let element = document.getElementById(taskInProgress);\n    element.classList.add(\"d-none\");\n}\n\nfunction removeNoTaskInProgress(taskInProgress = \"\") {\n    let element = document.getElementById(taskInProgress);\n    element.classList.remove(\"d-none\");\n}\n\nasync function loadTasks(path=\"\") {\n    let response = await fetch(baseUrl + path + \".json\");\n    return await response.json();\n}\n\nfunction cleanTaskboard() {\n    document.getElementById(\"board-task-on-to-do\").innerHTML = '';\n    document.getElementById(\"board-task-on-in-progress\").innerHTML = '';\n    document.getElementById(\"board-task-on-await-feedback\").innerHTML = '';\n    document.getElementById(\"board-task-on-done\").innerHTML = '';\n    countOnToDo = 0;\n    countOnInProgress = 0;\n    countOnAwaitFeedback = 0;\n    countOnDone = 0;\n}\n\nasync function renderAllTasks() {\n    let tasks = await loadTasks(\"/board/tasks\");\n    localStorage.tasks = JSON.stringify(tasks);\n    let contacts =  await loadTasks(\"/contacts\");\n    localStorage.usableContacts = JSON.stringify(contacts);\n    cleanTaskboard();\n    for (let taskId in tasks) {\n        let element = tasks[taskId];\n        let subtask = subtaskExist(element);\n        let categoryText = categoryFinder(element);\n        countForNoTask(element.position);\n        renderTask(element, taskId, subtask, categoryText);\n        for (let contact in element.selectContacts) {\n            let activeContactId = element.selectContacts[contact];\n            let activeContact = contacts[activeContactId];\n                renderAktiveContakts(activeContact, activeContactId, taskId);\n        }\n        subtaskCount = 0;\n    }\n    noTasksInProgress();\n}\n\nfunction subtaskExist(task) {\n    let subtask = \" \";\n    if (task.subtasks == \"no\") {\n        subtask = \"d-none\";\n    }\n    else {\n        subtaskCounter(task);\n    }\n    return subtask;\n}\n\nfunction subtaskCounter(task) {\n    let subtask = task.subtasks;\n    subtaskProofments = task.subtask;\n    subtaskCount = 0;\n    let i = 0;\n    subtaskCountProvement = 0;\n    for (const element of subtask) {\n        if (subtaskProofments[i] == 'true') {\n            subtaskCountProvement++;\n        }\n        i++;\n        subtaskCount++;\n\n    }\n    subtaskCountInProzent = 100 / subtaskCount * subtaskCountProvement;\n\n}\n\nfunction categoryFinder(task) {\n    let categoryText = \"\";\n    if (task.categorySelect == \"technical-task\") {\n        categoryText = \"Technical Task\";\n    } else {\n        categoryText = \"User Story\";\n    }\n    return categoryText;\n}\n\nfunction countForNoTask(positionFromCard) {\n    switch (positionFromCard) {\n        case \"board-task-on-to-do\":\n            countOnToDo++;\n            break;\n\n        case \"board-task-on-in-progress\":\n            countOnInProgress++;\n            break;\n\n        case \"board-task-on-await-feedback\":\n            countOnAwaitFeedback++;\n            break;\n\n        case \"board-task-on-done\":\n            countOnDone++;\n            break;\n    }\n}\n\nasync function deleteTask(event, taskId) {\n    event.preventDefault(event);\n    try {\n    let response = await fetch(baseUrl + \"/board/tasks/\" + taskId + \".json\", {\n        method: 'DELETE',\n    });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error(\"Error delete data in database:\", error);\n    }\n    closeTaskOverlay();\n}\n\nfunction renderAktiveContakts(activeContact, contactId, taskId) {\n    document.getElementById(\"selectContent\"+taskId).innerHTML += `\n    <p class=\"rounded-100 board-user-icon d-flex align-items-center justify-content-center ${activeContact.contactColor} -m-8\" id=\"${contactId}\">${activeContact.nameCharts[0]}${activeContact.nameCharts[1]}</p>\n    `\n}\n\nfunction renderTask(task, taskId, subtask, categoryText) {\n    document.getElementById(task.position).innerHTML += `\n        <div id=\"${taskId}\" onclick=\"openTaskOverlay('${taskId}')\" ondragstart=\"drag('${taskId}')\" draggable=\"true\" class=\"d-flex board-task-card flex-column\">\n            <div class=\"d-flex align-items-center\">\n                <p class=\"fc-white rounded-8 board-user d-flex align-items-center ${task.categorySelect}\" id=\"categoryTitle\">${categoryText}</p>\n            </div>\n            <div>\n                <p class=\"board-card-subtitle\" id=\"\">${task.title}</p>\n            </div>\n            <div>\n                <p class=\"board-description\" id=\"\">${task.description}</p>\n            </div>\n            <div class=\"d-flex align-items-center gap-10 ${subtask}\" id=\"board-done-progressbar\">\n                <div class=\"board-progressbar-full rounded-8\">\n                    <div class=\"board-progressbar rounded-8\" style=\"width: ${subtaskCountInProzent}%;\">\n                    </div>\n                </div>\n                <div class=\"d-flex board-subtasks gap-4\">\n                  <p> ${subtaskCountProvement}/${subtaskCount}</p>\n                  <p>Subtasks</p>\n                </div>\n            </div>\n            <div class=\"d-flex justify-content-between\">\n                <div class=\"fc-white d-flex\" id=\"selectContent${taskId}\">\n                </div>\n                <div class=\"board-icon-importance board-icon-${task.priority}-prio\">\n                </div>\n            </div>\n        </div>\n    `;\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/board.js b/js/board.js
--- a/js/board.js	(revision 5d1dcb6ed7364ed0cd2a96fb684fa06fdde4aa90)
+++ b/js/board.js	(date 1725368844575)
@@ -22,7 +22,7 @@
     dropCard["position"] = dropPosition;
     localStorage.activeTask = JSON.stringify(dropCard);
     localStorage.setItem("taskId", `${cardDraggedId}`);
-    await updateTask();
+    await updateTask(`/board/tasks/${cardDraggedId}`,dropCard);
     countOnToDo = 0;
     countOnInProgress = 0;
     countOnAwaitFeedback = 0;
@@ -30,22 +30,22 @@
     renderAllTasks();
 }
 
-async function updateTask() {
-    let task = localStorage.getItem("activeTask");
-    let taskId = localStorage.getItem("taskId");
+async function updateTask(path="",task) {
+    console.log(path);
+    console.log(task);
     try {
-        let response = await fetch(baseUrl + "/board/tasks/" + taskId + ".json", {
+        let response = await fetch(baseUrl + path + ".json", {
             method: 'PUT',
             headers: {
                 'Content-Type': 'application/json'
             },
-            body: task
+            body: JSON.stringify(task)
         }); 
         if (!response.ok) {
             throw new Error(`HTTP error! status: ${response.status}`);
         }
     }  catch (error) {
-        console.error("Error PUT data in database:", error);
+        console.error("Error PUT data in database:", error, response);
     }
 }
 
@@ -62,9 +62,7 @@
         task["subtasks"] = subtasklist;
         task["subtask"] = subtaskProofment;
     }
-    localStorage.activeTask = JSON.stringify(task);
-    localStorage.setItem("taskId", `${taskId}`);
-    await updateTask();
+    await updateTask(`/board/tasks/${taskId}`,task);
     closeTaskOverlay();
 }
 
@@ -171,7 +169,18 @@
 }
 
 async function loadTasks(path="") {
-    let response = await fetch(baseUrl + path + ".json");
+    //let response = await fetch(baseUrl + path + ".json");
+    let response;
+    try {
+         response = await fetch(baseUrl + path + ".json", {
+            method: 'GET',
+        });
+            if (!response.ok) {
+                throw new Error(`HTTP error! status: ${response.status}`);
+            }
+        } catch (error) {
+            console.error("Error GET data in database:", error);
+        }
     return await response.json();
 }
 
@@ -198,11 +207,6 @@
         let categoryText = categoryFinder(element);
         countForNoTask(element.position);
         renderTask(element, taskId, subtask, categoryText);
-        for (let contact in element.selectContacts) {
-            let activeContactId = element.selectContacts[contact];
-            let activeContact = contacts[activeContactId];
-                renderAktiveContakts(activeContact, activeContactId, taskId);
-        }
         subtaskCount = 0;
     }
     noTasksInProgress();
Index: js/add_task.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const baseUrl = \"https://remotestorage-join189-default-rtdb.europe-west1.firebasedatabase.app\";\nlet prio = \"-\";\nlet subtasklist = ['no'];\nlet subtaskProovment = [];\nlet expanded = false;\nlet contacts;\nlet selectContacts;\n\nasync function loadUsableContacts() {\n    contacts = await loadTasks(\"/contacts\");\n    selectContacts = [];\n    for (const element in contacts) {\n            const contact = contacts[element];\n            let initials = contact.nameCharts;\n            let name = contact.name;\n            let contactColor = contact.contactColor;\n            renderContactSelector(element, initials, name, contactColor);\n    }\n}\n\nfunction selectContact(contact=\"\") {\n    contacts = JSON.parse(localStorage.getItem(\"usableContacts\"));\n    let selectetContact = true;\n    let i = 0;\n    for (const element in selectContacts) {\n        \n        if (contact == selectContacts[element]) {\n            selectetContact = false;\n            selectContacts.splice(i, 1);\n            oldSelectedContact = document.getElementById(\"select\"+contact)\n            oldSelectedContact.remove();\n        }\n        i++;\n    }\n    if (selectetContact === true) {\n        selectContacts.push(contact);;\n        let newSelectedContact = contacts[contact];\n    renderSelectedContact(newSelectedContact, contact);\n    }\n}\n\nfunction showCheckboxes() {\n    var checkboxes = document.getElementById(\"checkboxes\");\n    if (!expanded) {\n        checkboxes.style.display = \"flex\";\n        expanded = true;\n    } else {\n        checkboxes.style.display = \"none\";\n        expanded = false;\n    }\n}\n\nasync function addTask(event, position = '') {\n    event.preventDefault(event);\n    await getInputs(position);\n}\n\nasync function getInputs(position) {\n    let inputs = {\n        \"selectContacts\": selectContacts,\n        \"position\": position,\n        \"title\": document.getElementById('title').value,\n        \"description\": document.getElementById('description').value,\n        \"datePicker\": document.getElementById('datePicker').value,\n        \"priority\": prio,\n        \"categorySelect\": document.getElementById('categorySelect').value,\n        \"subtasks\": subtasklist,\n        \"subtask\": subtaskProovment\n    };\n\n    await setTaskDataInDatabase(inputs);\n    clearAddTask();\n\n}\n\nfunction clearAddTask() {\n    subtasklist = ['no'];\n    subtaskProovment = [];\n    prioButtonClearSelect()\n    prio = '-';\n}\n\nasync function setTaskDataInDatabase(data) {\n    try {\n        let response = await fetch(baseUrl + \"/board/tasks\" + \".json\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        else {\n            window.location.assign('./board.html');\n        }\n        let responseData = await response.json();\n    } catch (error) {\n        console.error(\"Error setting data in database:\", error);\n    }\n}\n\nfunction openAddTaskOverlay(position = '') {\n    document.getElementById('addTaskOverlay').classList.remove('d-none');\n    renderAddOverlay(position);\n}\n\nfunction closeAddTaskOverlay() {\n    document.getElementById('addTaskOverlay').classList.add('d-none');\n}\n\nfunction prioButton(button, icon) {\n    buttonSelected = document.getElementById(button);\n    iconSelected = document.getElementById(icon);\n\n    buttonSelected.classList.add(\"priorityButtonActive\");\n    buttonSelected.classList.remove(\"priorityButton\");\n    iconSelected.classList.add(icon + 'Activ');\n    iconSelected.classList.remove(icon);\n}\n\nfunction prioButtonRemoveOther(button, icon, buttonOther, iconOther) {\n    buttonSelected = document.getElementById(button);\n    iconSelected = document.getElementById(icon);\n    buttonOtherSelected = document.getElementById(buttonOther);\n    iconOtherSelected = document.getElementById(iconOther);\n    buttonSelected.classList.add(\"priorityButton\");\n    buttonSelected.classList.remove(\"priorityButtonActive\");\n    iconSelected.classList.add(icon);\n    iconSelected.classList.remove(icon + 'Activ');\n    buttonOtherSelected.classList.add(\"priorityButton\");\n    buttonOtherSelected.classList.remove(\"priorityButtonActive\");\n    iconOtherSelected.classList.add(iconOther);\n    iconOtherSelected.classList.remove(iconOther + 'Activ');\n}\n\nfunction prioButtonclear(button, icon) {\n    buttonSelected = document.getElementById(button);\n    iconSelected = document.getElementById(icon);\n\n    buttonSelected.classList.add(\"priorityButton\");\n    buttonSelected.classList.remove(\"priorityButtonActive\");\n    iconSelected.classList.add(icon);\n    iconSelected.classList.remove(icon + 'Activ');\n}\n\nfunction prioButtonSelect(priority) {\n    prio = priority;\n    switch (prio) {\n        case 'urgent':\n            prioButton('urgentButton', 'addTaskPrioUrgent');\n            prioButtonRemoveOther('mediumButton', 'addTaskPrioMedium', 'lowButton', 'addTaskPrioLow');\n            break;\n        case 'medium':\n            prioButton('mediumButton', 'addTaskPrioMedium');\n            prioButtonRemoveOther('urgentButton', 'addTaskPrioUrgent', 'lowButton', 'addTaskPrioLow');\n            break;\n        case 'low':\n            prioButton('lowButton', 'addTaskPrioLow');\n            prioButtonRemoveOther('urgentButton', 'addTaskPrioUrgent', 'mediumButton', 'addTaskPrioMedium');\n            break;\n        default:\n            break;\n    }\n}\n\nfunction prioButtonClearSelect() {\n    switch (prio) {\n        case 'urgent':\n            prioButtonclear('urgentButton', 'addTaskPrioUrgent');\n            break;\n        case 'medium':\n            prioButtonclear('mediumButton', 'addTaskPrioMedium');\n            break;\n        case 'low':\n            prioButtonclear('lowButton', 'addTaskPrioLow');\n            break;\n        default:\n            break;\n    }\n}\n\n\n\nfunction editCreatSubtask(subtaskCreateCount = '', newSubtask = '') {\n    document.getElementById('subtasks').removeAttribute(\"placeholder\");\n    document.getElementById('subtasks').value = newSubtask;\n    deleteCreateSubtask(subtaskCreateCount);\n}\n\nfunction deleteCreateSubtask(subtaskCreateCount = '') {\n    if (subtasklist.length === 1) {\n        subtasklist = ['no'];\n        subtaskProovment = ['no']\n    }\n    else {\n        let subtaskCreateCountSplice = subtaskCreateCount;\n        subtasklist.splice(subtaskCreateCountSplice, 1);\n        subtaskProovment.splice(subtaskCreateCountSplice, 1);\n    }\n    let element = document.getElementById('subtaskStorage');\n    if (element) {\n        let child = document.querySelector('#subtaskCreate_' + subtaskCreateCount);;\n        if (child) {\n            child.remove();\n        }\n    }\n    document.getElementById('subtaskStorage').innerHTML = ''\n    renderAllCreateSubtaskNew();\n}\n\nfunction renderAllCreateSubtaskNew() {\n    if (subtasklist[0] == 'no') {\n    } else {\n        let i = 0;\n        for (let subtask in subtasklist) {\n            renderCrateSubtask(subtasklist[i], i);\n            i++;\n        }\n    }\n}\n\nfunction renderAllCreateSubtasks(taskId) {\n    let i = 0;\n    let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    let element = tasks[taskId];\n    let subtask = element.subtasks;\n    if (subtask == 'no') {\n        subtasklist = ['no'];\n    } else {\n        for (let subtask in element.subtasks) {\n            subtasklist.push(element.subtasks[i]);\n            subtaskProovment.push(element.subtask[i]);\n            renderCrateSubtask(element.subtasks[i], i);\n            i++;\n        }\n    }\n}\n\nfunction addSubtaskAddArray() {\n    let newSubtask = document.getElementById('subtasks').value;\n    if (subtasklist[0] == 'no') {\n        subtasklist = [];\n        subtaskProovment = [];\n    }\n    subtasklist.push(newSubtask);\n    subtaskProovment.push(\"false\");\n    subtasks.value = '';\n    let subtaskCreateCount = subtasklist.length - 1;\n    renderCrateSubtask(newSubtask, subtaskCreateCount);\n}\n\nfunction renderSelectedContact(newSelectedContact, contact) {\n    document.getElementById(\"selectedContact\").innerHTML += `\n    <p\n    class=\"rounded-100 board-user-icon d-flex align-items-center justify-content-center ${newSelectedContact.contactColor}\" id=\"select${contact}\">\n    ${newSelectedContact.nameCharts[0]}${newSelectedContact.nameCharts[1]}</p> `\n}\n\nfunction renderContactSelector(element, initials, name, contactColor) {\n    console.log(\"element:  \"+element);\n    document.getElementById('selectContacts').innerHTML += /*html*/ `\n        <label for=\"${element}\" class=\"d-flex justify-content-between w-100\">\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <p \n                class=\"fc-white rounded-100 board-user-icon d-flex flex-row align-items-center justify-content-center ${contactColor}\">\n                ${initials[0]}${initials[1]}</p>\n                <p>${name}</p>\n            </div>\n            <input type=\"checkbox\" id=\"input${element}\" onclick=\"selectContact('${element}')\"/>\n        </label>`\n}\n\nfunction renderCrateSubtask(newSubtask, subtaskCreateCount) {\n\n    document.getElementById('subtaskStorage').innerHTML += `\n        <li class=\"addTaskSubtaskShow\" id=\"subtaskCreate_${subtaskCreateCount}\" class=\"justify-content-between\">\n            • ${newSubtask}\n            <div class=\"d-flex\">\n                <button type=\"button\"  class=\"addTaskSubtaskEdit\" onclick=\"editCreatSubtask('${subtaskCreateCount}', '${newSubtask}')\"></button>\n                <div class=\"addTaskSubtaskVertikalLine\"></div>\n                <button type=\"button\"  class=\"addTaskSubtaskWaste\" onclick=\"deleteCreateSubtask('${subtaskCreateCount}')\"></button>\n            </div>\n        </li>\n    `;\n}\n\nfunction renderAddOverlay(position) {\n    document.getElementById('addTaskOverlay').innerHTML = ''\n    document.getElementById('addTaskOverlay').innerHTML = `            \n        <div class=\"outerTaskOverlayWrapper slide-top\">\n                <div class=\"addTaskOverlayHeadline\">\n                    <h1>Add Task</h1>\n                    <img src=\"./img/icons/cancel-logo.png\" alt=\"cancel\" onclick=\"closeAddTaskOverlay()\" title=\"Klick or press ESC to close\">\n                </div>\n                <div id=\"innerTaskOverlayWrapper\" class=\"innerTaskOverlayWrapper\">\n                    <form class=\"main\" onsubmit=\"addTask('${position}')\">\n                        <div id=\"addTaskWrapper\" class=\"addTaskWrapper\">\n                            <div class=\"addTaskWrapperLeft\">\n                                <div>\n                                    <p class=\"fSize-16\">Title<span class=\"redStar\">*</span></p>\n                                    <input type=\"text\" id=\"title\" placeholder=\"Enter Title\" required/>\n                                </div>\n        \n                                <div class=\"spacer\">&nbsp;</div>\n        \n                                <div>\n                                    <p class=\"fSize-16\">Description</p>\n                                    <textarea rows=\"5\" id=\"description\" placeholder=\"Enter a Description\"></textarea>\n                                </div>\n        \n                                <div class=\"spacer\">&nbsp;</div>\n        \n                                <div>\n                                    <p class=\"fSize-16\">Assigned to</p>\n                                    <select name=\"choose\" id=\"selectInputAssignee\">\n                                        <option value=\"Assigned to...\">Assigned to...</option>\n                                        <option value=\"Test 1\">Test 1</option>\n                                        <option value=\"Test 2\">Test 2</option>\n                                    </select>\n                                </div>\n                            </div>\n        \n                            <div class=\"addTaskWrapperMid divider\">&nbsp;</div>\n        \n                            <div class=\"addTaskWrapperRight\">\n                                <div>\n                                    <p class=\"fSize-16\">Due Date<span class=\"redStar\">*</span></p>\n                                    <input type=\"date\" id=\"datePicker\" required>\n                                </div>\n        \n                                <div>\n                                    <p class=\"fSize-16\">Prio</p>\n                                    <div id=\"priority\" class=\"priority d-flex\">\n                                        <button id=\"urgentButton\" type=\"button\" onclick=\"prioButtonSelect('urgent')\" class=\"priorityButton d-flex align-items-center justify-content-evenly\">\n                                            Urgent\n                                            <div id=\"addTaskPrioUrgent\" class=\"priorityImg addTaskPrioUrgent\"></div>\n                                        </button>\n                                        <button id=\"mediumButton\" type=\"button\" onclick=\"prioButtonSelect('medium')\" class=\"priorityButton d-flex align-items-center justify-content-evenly\">\n                                            Medium\n                                            <div id=\"addTaskPrioMedium\" class=\"priorityImg addTaskPrioMedium\"></div>                               \n                                        </button>\n                                        <button id=\"lowButton\" type=\"button\" onclick=\"prioButtonSelect('low')\" class=\"priorityButton d-flex align-items-center justify-content-evenly\">\n                                            Low\n                                            <div id=\"addTaskPrioLow\" class=\"priorityImg addTaskPrioLow\"></div>\n                                        </button>\n                                    </div>\n                                </div>\n        \n                                <div>\n                                    <p class=\"fSize-16\">Category<span class=\"redStar\">*</span></p>\n                                    <select name=\"choose\" id=\"categorySelect\" required>\n                                        <option value=\"\" disabled selected>Select Category</option>\n                                        <option value=\"technical-task\">Technical-Task</option>\n                                        <option value=\"user-story\">User-Story</option>\n                                    </select>\n                                </div>\n        \n                                <div>\n                                    <p class=\"fSize-16\">Subtasks</p>\n                                    <div class=\"addTaskEnterSubtask d-flex align-items-center justify-content-between\">\n                                    <input type=\"text\" id=\"subtasks\" placeholder=\"Enter Subtasks\"/>\n                                        <button class=\"d-flex\" id=\"addTaskAddSubtaskButton\" type=\"button\" onclick=\"addSubtaskAddArray()\">\n                                                <div class=\"addTaskAdd\"></div>\n                                        </button>\n                                    </div>\n                                    <lu id=\"subtaskStorage\"></lu>\n                                </div>\n                            </div>\n                        </div>\n        \n                        <div id=\"addTaskBottom\" class=\"addTaskBottom\">\n                            <p class=\"fSize-16\">This field is required<span class=\"redStar\">*</span></p>\n        \n                            <div id=\"createTaskButton\">\n                                <button type=\"button\" onclick=\"clearAddTask()\" id=\"clear\">Clear <img src=\"./img/icons/cancel-logo.png\"  class=\"createTaskButtonImg\"></button>\n                                <button id=\"create\">Create Task <img src=\"./img/icons/check-icon.png\"  class=\"createTaskButtonImg\"></button>\n                            </div>\n                        </div>\n                    </form>\n\n                </div>\n            </div>`\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/add_task.js b/js/add_task.js
--- a/js/add_task.js	(revision 5d1dcb6ed7364ed0cd2a96fb684fa06fdde4aa90)
+++ b/js/add_task.js	(date 1725368844572)
@@ -9,6 +9,7 @@
 async function loadUsableContacts() {
     contacts = await loadTasks("/contacts");
     selectContacts = [];
+    prioButtonSelect('medium');
     for (const element in contacts) {
             const contact = contacts[element];
             let initials = contact.nameCharts;
@@ -22,9 +23,11 @@
     contacts = JSON.parse(localStorage.getItem("usableContacts"));
     let selectetContact = true;
     let i = 0;
+    let checkbox = document.getElementById("input"+contact);
     for (const element in selectContacts) {
         
         if (contact == selectContacts[element]) {
+            checkbox.checked = false;
             selectetContact = false;
             selectContacts.splice(i, 1);
             oldSelectedContact = document.getElementById("select"+contact)
@@ -33,12 +36,24 @@
         i++;
     }
     if (selectetContact === true) {
+        checkbox.checked = true;
         selectContacts.push(contact);;
         let newSelectedContact = contacts[contact];
     renderSelectedContact(newSelectedContact, contact);
     }
 }
 
+document.addEventListener("click", function(event) {
+    var checkboxes = document.getElementById("checkboxes");
+    var selectBox = document.querySelector(".selectBox");
+
+    // Überprüfe, ob der Klick außerhalb des Auswahlfeldes war
+    if (expanded && !selectBox.contains(event.target) && !checkboxes.contains(event.target)) {
+        checkboxes.style.display = "none";
+        expanded = false;
+    }
+});
+
 function showCheckboxes() {
     var checkboxes = document.getElementById("checkboxes");
     if (!expanded) {
@@ -102,6 +117,7 @@
 }
 
 function openAddTaskOverlay(position = '') {
+    loadUsableContacts();
     document.getElementById('addTaskOverlay').classList.remove('d-none');
     renderAddOverlay(position);
 }
@@ -259,16 +275,15 @@
 }
 
 function renderContactSelector(element, initials, name, contactColor) {
-    console.log("element:  "+element);
     document.getElementById('selectContacts').innerHTML += /*html*/ `
-        <label for="${element}" class="d-flex justify-content-between w-100">
+        <label for="${element}" class="d-flex justify-content-between w-100" onclick="selectContact('${element}')">
             <div class="d-flex align-items-center justify-content-between">
                 <p 
                 class="fc-white rounded-100 board-user-icon d-flex flex-row align-items-center justify-content-center ${contactColor}">
                 ${initials[0]}${initials[1]}</p>
                 <p>${name}</p>
             </div>
-            <input type="checkbox" id="input${element}" onclick="selectContact('${element}')"/>
+            <input type="checkbox" id="input${element}"/>
         </label>`
 }
 
@@ -312,13 +327,24 @@
         
                                 <div class="spacer">&nbsp;</div>
         
-                                <div>
-                                    <p class="fSize-16">Assigned to</p>
-                                    <select name="choose" id="selectInputAssignee">
-                                        <option value="Assigned to...">Assigned to...</option>
-                                        <option value="Test 1">Test 1</option>
-                                        <option value="Test 2">Test 2</option>
-                                    </select>
+                                <div class="gap-8">
+                                    <p class="fSize-16 mb-8">Assigned to</p>
+                                    <div>
+                                        <div class="selectBox" onclick="showCheckboxes()">
+                                            <select id="selectInputAssignee">
+                                                <option value="" disabled selected>Select contacts to assign</option>
+                                            </select>
+                                            <div class="overSelect"></div>
+                                        </div>
+                                        <div id="checkboxes" class="">
+                                            <div class="d-flex flex-column w-100" id="selectContacts">
+                                            </div>
+                                        </div>
+                                    </div>
+                                    <div class="d-flex justify-content-between mt-8">
+                                        <div class="fc-white d-flex gap-10" id="selectedContact">
+                                        </div>
+                                    </div>
                                 </div>
                             </div>
         
